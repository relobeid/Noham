// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Auth
  accounts Account[]
  sessions Session[]

  // App data
  scans Scan[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Scan {
  id        String    @id @default(cuid())
  userId    String
  status    ScanStatus @default(PENDING)
  trustScore Int?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  resume  Resume?
  github  GitHub?
  reports Report[]

  @@map("scans")
}

model Resume {
  id       String @id @default(cuid())
  scanId   String @unique
  filename String
  fileSize Int
  fileType String
  fileUrl  String

  // Extracted data
  rawText     String? @db.Text
  jobs        Json?
  skills      Json?
  education   Json?
  timeline    Json?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  scan Scan @relation(fields: [scanId], references: [id], onDelete: Cascade)

  @@map("resumes")
}

model GitHub {
  id       String @id @default(cuid())
  scanId   String @unique
  username String
  profileUrl String

  // GitHub data
  profile       Json?
  repositories  Json?
  contributions Json?
  activity      Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  scan Scan @relation(fields: [scanId], references: [id], onDelete: Cascade)

  @@map("github")
}

model Report {
  id       String @id @default(cuid())
  scanId   String
  type     ReportType
  severity RedFlagSeverity
  title    String
  description String @db.Text
  details  Json?

  createdAt DateTime @default(now())

  // Relations
  scan Scan @relation(fields: [scanId], references: [id], onDelete: Cascade)

  @@map("reports")
}

enum ScanStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum ReportType {
  TIMELINE_OVERLAP
  EMPLOYMENT_GAP
  GITHUB_INACTIVITY
  SKILL_MISMATCH
  DATE_INCONSISTENCY
}

enum RedFlagSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
} 